# This is the name of the GitHub Actions workflow.
name: CD - Deploy to Staging and Production

# This workflow is triggered on any push to the 'develop' or 'main' branches.
on:
  push:
    branches:
      - develop
      - main

# Defines the jobs that will be run.
jobs:
  # ===================================================================
  #  STAGING DEPLOYMENT JOB
  #  This job runs ONLY when code is pushed to the 'develop' branch.
  # ===================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    # This condition ensures this job only runs for the 'develop' branch.
    if: github.ref == 'refs/heads/develop'
    # This specifies that the job will use secrets from the 'staging' environment in GitHub.
    environment: staging

    # The sequence of steps to be executed.
    steps:
      # Step 1: Check out the repository code.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # --- Frontend Deployment (Staging) ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install Frontend Dependencies
        run: npm --prefix frontend ci
      - name: Build Frontend
        run: npm --prefix frontend run build

      - name: Deploy Frontend to Firebase Hosting (Staging)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          # This uses the service account key stored in your 'staging' environment secrets.
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_CAREERCOPILOT_STAGING }}'
          # This is the specific project ID for your staging environment.
          projectId: '${{ secrets.GCP_STAGING_PROJECT_ID }}'
          #
          # THE CRITICAL FIX IS HERE: Tells the action where to find your firebase.json file.
          #
          entryPoint: ./frontend

      # --- Backend Deployment (Staging) ---
      - name: Authenticate to Google Cloud (Staging)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_STAGING_SA_KEY }}'

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Build and Push Docker Image to Artifact Registry (Staging)
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: australia-southeast1-docker.pkg.dev/${{ secrets.GCP_STAGING_PROJECT_ID }}/careercopilot-repo/backend:${{ github.sha }}

      - name: Deploy Backend to Cloud Run (Staging)
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: 'careercopilot-backend-staging'
          region: 'australia-southeast2'
          image: australia-southeast1-docker.pkg.dev/${{ secrets.GCP_STAGING_PROJECT_ID }}/careercopilot-repo/backend:${{ github.sha }}
          # This section injects all your runtime secrets into the running application.
          env_vars: |
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
            PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }}
            PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }}
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
            GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID_STAGING }}
            GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET_STAGING }}

  # ===================================================================
  #  PRODUCTION DEPLOYMENT JOB
  #  This job runs ONLY when code is pushed to the 'main' branch.
  # ===================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging # Optional: Uncomment if you want to force staging to succeed before production can run.
    # This condition ensures this job only runs for the 'main' branch.
    if: github.ref == 'refs/heads/main'
    # This specifies that the job will use secrets from the 'production' environment in GitHub.
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # --- Frontend Deployment (Production) ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install Frontend Dependencies
        run: npm --prefix frontend ci
      - name: Build Frontend
        run: npm --prefix frontend run build

      - name: Deploy Frontend to Firebase Hosting (Production)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          # This uses the service account key stored in your 'production' environment secrets.
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_CAREERCOPILOT }}'
          # This is the specific project ID for your production environment.
          projectId: '${{ secrets.GCP_PROJECT_ID }}'
          #
          # THE CRITICAL FIX IS HERE: Same fix, applied to the production job.
          #
          entryPoint: ./frontend

      # --- Backend Deployment (Production) ---
      - name: Authenticate to Google Cloud (Production)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Build and Push Docker Image to Artifact Registry (Production)
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: australia-southeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/careercopilot-repo/backend:${{ github.sha }}

      - name: Deploy Backend to Cloud Run (Production)
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: 'careercopilot-backend' # Note the different service name for prod
          region: 'australia-southeast2'
          image: australia-southeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/careercopilot-repo/backend:${{ github.sha }}
          env_vars: |
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
            PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }}
            PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }}
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
            GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID_PROD }}
            GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET_PROD }}
