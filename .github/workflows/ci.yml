# This is the name of the GitHub Actions workflow.
# It will appear in the "Actions" tab of your GitHub repository.
name: CI - Build and Test

# This workflow is triggered automatically on every pull request
# that targets either the 'develop' or 'main' branches.
on:
  pull_request:
    branches:
      - develop
      - main

# Defines the jobs that will be run.
jobs:
  # ===================================================================
  #  FRONTEND VALIDATION JOB
  #  This job checks the frontend code for errors.
  # ===================================================================
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest # Use the latest stable version of Ubuntu as the runner.

    steps:
      # Step 1: Check out the repository code so the runner has access to it.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up the Node.js environment. Version 20 is a stable LTS release.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm' # Cache npm dependencies to speed up subsequent runs.
          cache-dependency-path: frontend/package-lock.json

      # Step 3: Install all frontend dependencies.
      # 'ci' is used for continuous integration as it provides faster, more reliable builds.
      # 'working-directory' is critical here to run the command in the right place.
      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./frontend

      # Step 4: Run the linter to check for code style issues.
      - name: Run Linter
        run: npm run lint
        working-directory: ./frontend

      # Step 5: Run the production build command. This is the most important test.
      # It checks for TypeScript errors and ensures the application is buildable.
      - name: Run Build
        run: npm run build
        working-directory: ./frontend

  # ===================================================================
  #  BACKEND VALIDATION JOB
  #  This job checks the backend code for errors. It runs in parallel with the frontend job.
  # ===================================================================
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up the Python environment, specifying the correct version.
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip' # Cache pip dependencies to speed up subsequent runs.
          cache-dependency-path: backend/requirements.lock

      # Step 3: Install all backend dependencies, including development tools.
      # It's crucial that this uses the '-dev.txt' file which contains 'black'.
      - name: Install Backend Dependencies
        run: pip install -r backend/requirements-dev.txt

      # Step 4: Run the Black code formatter to check for style issues.
      # '--check' ensures it will fail if the code is not formatted, without changing files.
      - name: Run Linter (Black)
        run: black --check backend